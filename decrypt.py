#pip install cryptography python-dotenv

#!/usr/bin/env python3
"""
Decryption script that loads key and salt from .env file and decrypts data generated by encrypt.py.
Uses PBKDF2 for key derivation and AES-256-GCM for decryption.
"""

import os
import base64
from dotenv import load_dotenv
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives.ciphers.aead import AESGCM

# Load environment variables from .env file
load_dotenv()

# Get key and salt from environment variables
DECRYPTION_KEY = os.getenv('DECRYPTION_KEY')
DECRYPTION_SALT = os.getenv('DECRYPTION_SALT')

# Validate that environment variables are loaded
if not DECRYPTION_KEY or not DECRYPTION_SALT:
    raise ValueError("Missing DECRYPTION_KEY or DECRYPTION_SALT in .env file")

def decrypt_passphrase(encrypted_data, key, salt):
    """
    Decrypt data using the provided key and salt.
    
    Args:
        encrypted_data (str): Base64 encoded encrypted data with nonce
        key (str): The decryption key
        salt (str): The salt for key derivation
    
    Returns:
        str: The decrypted passphrase
    """
    # Convert salt to bytes
    salt_bytes = salt.encode()
    
    # Derive the same key using PBKDF2
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=salt_bytes,
        iterations=100000,
    )
    derived_key = kdf.derive(key.encode())
    
    # Create AES-GCM cipher
    aesgcm = AESGCM(derived_key)
    
    # Decode the base64 data
    encrypted_bytes = base64.b64decode(encrypted_data.encode())
    
    # Extract nonce (first 12 bytes) and ciphertext (rest)
    nonce = encrypted_bytes[:12]
    ciphertext = encrypted_bytes[12:]
    
    # Decrypt the data
    decrypted_bytes = aesgcm.decrypt(nonce, ciphertext, None)
    
    # Convert back to string
    return decrypted_bytes.decode()

def main():
    """Main function to handle decryption."""
    print("=== Passphrase Decryption Tool ===")
    print(f"Loaded Key: {DECRYPTION_KEY}")
    print(f"Loaded Salt: {DECRYPTION_SALT}")
    print()
    
    # Get encrypted data from user
    print("Enter the encrypted data (base64 encoded):")
    encrypted_input = input().strip()
    
    # Option to read from file if no input provided
    if not encrypted_input:
        try:
            with open("encrypted_data.txt", "r") as f:
                encrypted_input = f.read().strip()
            print(f"Reading encrypted data from 'encrypted_data.txt'")
        except FileNotFoundError:
            print("No input provided and 'encrypted_data.txt' not found.")
            return
    
    try:
        # Decrypt the data
        decrypted_passphrase = decrypt_passphrase(encrypted_input, DECRYPTION_KEY, DECRYPTION_SALT)
        
        print("\n=== Decryption Results ===")
        print(f"Encrypted data: {encrypted_input}")
        print(f"Decrypted passphrase: {decrypted_passphrase}")
        
    except Exception as e:
        print(f"Decryption failed: {str(e)}")
        print("Please check:")
        print("1. The encrypted data is correctly formatted")
        print("2. The key and salt match those used for encryption")
        print("3. The data hasn't been corrupted")

if __name__ == "__main__":
    main()
